%YAML:1.0

#common parameters
imu_topic: "/imu/data_raw"
image_topic: "/ptz_cam/image_raw"
depth_topic: "/front/aligned_depth_to_color/image_raw"
output_path: "/home/rmua3/vins_output/"

#camera calibration
model_type: PINHOLE
camera_name: camera
image_width: 1280
image_height: 720
max_depth: 8.0  # max accurate depth of rgbd camera
min_depth: 0.1  # min accurate depth of rgbd camera
depth_cov: 0.05 # depth measurement cov when depth = 1

distortion_parameters:
   k1: -0.011892
   k2: -0.003478
   p1: -0.000148
   p2: -0.001814
projection_parameters:
   fx: 576.021767
   fy: 575.470066
   cx: 639.888278
   cy: 383.313454

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
# extrinsicRotation: !!opencv-matrix
#    rows: 3
#    cols: 3
#    dt: d
#    data: [ -0.11611536971188302, 0.9882030778597516, 0.09985939027045991,
#            -0.9917593890612512, -0.12083501386356849, 0.042570102577356675, 
#            0.05413441719948768, -0.09409344468721774, 0.9940904830755433]
# #Translation from camera frame to imu frame, imu^T_cam
# extrinsicTranslation: !!opencv-matrix
#    rows: 3
#    cols: 1
#    dt: d
#    data: [0.03300634029549479,  -0.06539298405389925, -0.021536872910054017]

# extrinsicRotation: !!opencv-matrix
#    rows: 3
#    cols: 3
#    dt: d
#    data: [ 0, -1, 0,
#           1, 0, 0,
#           0, 0, 1]
# #Translation from camera frame to imu frame, imu^T_cam
# extrinsicTranslation: !!opencv-matrix
#    rows: 3
#    cols: 1
#    dt: d
#    data: [0.0,  -0.0, -0.0]


extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, -1, 0,
           1,  0, 0,
           0,  0, 1]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.00615,  -0.0075, -0.02033]


# extrinsicRotation: !!opencv-matrix
#    rows: 3
#    cols: 3
#    dt: d
#    data: [ -0.15306861,  -0.98815402,  -0.01102837,
#             0.98821521,  -0.15306842,  -0.00086623,
#            -0.00083213,  -0.011031,     0.99993881]
# #Translation from camera frame to imu frame, imu^T_cam
# extrinsicTranslation: !!opencv-matrix
#    rows: 3
#    cols: 1
#    dt: d
#    data: [0.00615,  -0.0075, -0.02033]


#feature traker paprameters
max_cnt: 200            # max feature number in feature tracking
min_dist: 30            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 2.0        # ransac threshold (pixel)
show_track: 0           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
use_fast: 0             # if it equals to 1, we extract and track fast feature, otherwise we use GFTT from opencv
use_rgbd: 0             # if using rgbd camera, turn on it. Depth residuals will be added to sliding window optimization and initialization
min_fast_resp: 7       # min response of fast feature

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)
reproj_threshold: 5.0

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.04           # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.004          # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.02           # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.002           # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#loop_closure closure parameters
loop_closure: 0                    # start loop_closure closure
fast_relocalization: 0             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/rmua2/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.0                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet).

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ